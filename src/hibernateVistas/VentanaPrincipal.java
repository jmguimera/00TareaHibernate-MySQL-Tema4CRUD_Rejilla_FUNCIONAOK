package hibernateVistas;

import clientes.entity.Clientes; // a침adida clase creada por hibernate entidad cliente 
import hibernateDAO.ClientesDAO; // clase que contiene operacion admin base de datos (CRUD)

import javax.swing.table.DefaultTableModel;
import java.awt.Point;
import javax.swing.JOptionPane;

public class VentanaPrincipal extends javax.swing.JFrame {
    
/**
 * Objeto PARA DECIRLE QUE LA REJILLA USE ESTE MODELO : 
 * BOTON DERECHO EN REJILLA-->TABLE CONTENT->CUSTOM ->PONER EL NOMBRE Del atributo,
 * en este caso modelo
 */
    private DefaultTableModel modelo;  

    /**
     * Variable que contiene el valor del nif del renglon que si pinche en la
     * rejilla, se usa para modificarlo en la base de datos cuando este no es
     * un primary de key, porque en ese caso da error hibernate
     */
    public String nifPinchado; 
    
    /**
    * objeto q da acceso a metodos de operaciones de insertar, editar, eliminar,
    * conexion a la base de datos, control de transacciones y otras con hibernate
    */ 
    private ClientesDAO cdao=new ClientesDAO();
  
    /**
     * Objeto que da acceso a entorno de la ventalla de detalle para compartir
     * con este programa  datos o metodos
     */
    
    private VentanaDetalle wDetalle;  
     
    public VentanaPrincipal() {
       
        this.wDetalle=new VentanaDetalle();           
        this.creaModeloRejilla();
        this.cargaDatos();

        initComponents();
      
    }

   public void creaModeloRejilla() 
   {
          this.modelo = new DefaultTableModel() // Esto define el contenido de la rejilla.
                                            // DESCOMENTAR PARA HACER QUE EL CONTENIDO DE LA REJILLA NO SE PUEDA MODIFICAR POR EL OPERADOR
                            { @Override
                                public boolean isCellEditable(int fila, int columna) 
                                    {
                                return false; //Con esto conseguimos que la tabla no se pueda editar
                               }
                             };
        
        
         // se a침aden las columnas q se quierne mostrar al modelo.
        
     this.modelo.addColumn("NIF");
     this.modelo.addColumn("Nombre");
   }
    
    private void cargaDatos() 
    {
       // Se borran todos los elementos q se tengan en este momento en la rejilla.
         this.modelo.getDataVector().removeAllElements(); 
 
       // aqui el rellenado de datos del modelo se obtiene del llamado a la rutina
       // llenaRejilla del ofrece cdao, que devuelve el contenido que 
         this.modelo=cdao.llenaRejilla(this.modelo);
    
     }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
 @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

   //     entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory(null).createEntityManager();
        jScrollPane1 = new javax.swing.JScrollPane();
        rejillaDatos = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnIrAlPrincipio = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        btnIrAlFinal = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        btnBorrar = new javax.swing.JToggleButton();
        btnNuevaFila = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rejilla /Detalle");

        rejillaDatos.setModel(modelo);
        rejillaDatos.setToolTipText("");
        rejillaDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rejillaDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(rejillaDatos);

        btnIrAlPrincipio.setText("<<");
        btnIrAlPrincipio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIrAlPrincipioActionPerformed(evt);
            }
        });

        btnAnterior.setText("<");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnSiguiente.setText(">");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnIrAlFinal.setText(">>");
        btnIrAlFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIrAlFinalActionPerformed(evt);
            }
        });

        jButtonSalir.setText("Salir");
        jButtonSalir.setToolTipText("Termina la aplicaci칩n y cierra la ventana");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIrAlPrincipio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAnterior)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSiguiente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnIrAlFinal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSalir)
                .addGap(78, 78, 78))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSiguiente)
                    .addComponent(btnIrAlFinal)
                    .addComponent(btnAnterior)
                    .addComponent(btnIrAlPrincipio)
                    .addComponent(jButtonSalir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnBorrar.setText("Eliminar");
        btnBorrar.setToolTipText("Borrar fila actual");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnNuevaFila.setText("Agregar");
        btnNuevaFila.setToolTipText("A침adir nueva fila");
        btnNuevaFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaFilaActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.setToolTipText("Modificar la fila actual");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnNuevaFila)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModificar)
                        .addGap(57, 57, 57)
                        .addComponent(btnBorrar)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevaFila)
                    .addComponent(btnModificar)
                    .addComponent(btnBorrar))
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
    private String dameElNifPinchado (int fila)
      {
         return  (String) this.rejillaDatos.getModel().getValueAt(fila,0);  
         
      }
      
    private String dameElNifPinchado (java.awt.event.MouseEvent evt)
    {
        Point p = evt.getPoint();  // no indica la posici칩n del click 
        int row = this.rejillaDatos.rowAtPoint(p); // dada la posici칩n del click en la rejilla nos da la fila.
        return dameElNifPinchado(row); // devuelve el nif identificador del rengl칩n
    }
  // Cuando se hace doble click sobre un rengl칩n de la rejilla este metodo lo captura
  // Recarga los datos en la ventana de Detalle
    private void recargaDatos( java.awt.event.MouseEvent evt) 
    {
         this.wDetalle.recargaDatos( this.dameElNifPinchado(evt));
    }
  // Cuando se recorre la rejilla por navegacion de la teclas arriba, abajo, inicio o fin este metodo es invocado
  // Recarga los datos en la ventana de Detalle    
    private void recargaDatos(int fila)
    {
       this.wDetalle.recargaDatos( this.dameElNifPinchado(fila));
      
    }
    
    private void rejillaDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rejillaDatosMouseClicked
        
            
        if ( evt.getClickCount()== 2)  
                        { 
                             
                            this.recargaDatos(evt);              
                            this.wDetalle.modoConsulta(); // solo boton cerrar
                             this.wDetalle.setVisible(true);
                             return;
                        }
        
        
        if ( this.wDetalle.isVisible()) // si esta visible
                         {
                            this.recargaDatos(evt);                                 
                         }
         
    }//GEN-LAST:event_rejillaDatosMouseClicked

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
       int n=this.rejillaDatos.getSelectedRow();
       
       if  ( this.rejillaDatos.getRowCount()-1 == n) return;
       n++;
      this.rejillaDatos.changeSelection( n,1,false,false);      
      if (this.wDetalle.isVisible())  this.recargaDatos(n); 
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnIrAlFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIrAlFinalActionPerformed
      
      int n=this.rejillaDatos.getSelectedRow();      
      
      if  ( this.rejillaDatos.getRowCount()-1 == n) return;
       
      n=this.rejillaDatos.getRowCount()-1;
      this.rejillaDatos.changeSelection( n,1,false,false);      
      if (this.wDetalle.isVisible()) this.recargaDatos(  n); 
    }//GEN-LAST:event_btnIrAlFinalActionPerformed

    private void btnIrAlPrincipioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIrAlPrincipioActionPerformed
         int n=this.rejillaDatos.getSelectedRow();
       
       if  ( 0 == n) return;
       n=0;
      this.rejillaDatos.changeSelection( n,1,false,false);      
      if (this.wDetalle.isVisible())  this.recargaDatos(n); 
    }//GEN-LAST:event_btnIrAlPrincipioActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
      int n=this.rejillaDatos.getSelectedRow();
       
       if  ( 0 == n) return;
       n--;
      this.rejillaDatos.changeSelection( n,1,false,false);      
      if (this.wDetalle.isVisible())  this.recargaDatos(n);   
    }//GEN-LAST:event_btnAnteriorActionPerformed

   
    /**
    * Boton ELIMINACION DEL REGISTRO Q MUESTRA LA FILA
    */
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        int n=this.rejillaDatos.getSelectedRow();
       
       if  ( n < 0 ) return;       // si no estamos sobre ninguna fila nos vamos.
       
       String nif=this.dameElNifPinchado(n);
       
       if (JOptionPane.showConfirmDialog(null,"?Borramos el registro fila con el NIF ='"+nif.trim()+"'?") != JOptionPane.YES_OPTION) return;

       /*modificado por josem */
        // creamos la instruccion de borrado que maneja las rutinas creadas para hibernate
         cdao.eliminaCliente(cdao.getCliente(nif));
         
         
         this.cargaDatos();
         this.modelo.fireTableDataChanged();      
        
    }//GEN-LAST:event_btnBorrarActionPerformed

    /*
    *Boton INSERTAR NUEVO REGISTRO EN UNA NUEVA FILA 
    */
    
    private void btnNuevaFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaFilaActionPerformed
         
              
         this.wDetalle.modoEditar(); // ahora aparecen los botones de grabar y cancelar y se nos pone en modal
         this.wDetalle.limpiaCampos();// todos los datos en blanco para empezar a editar
         
         boolean ok; // para hace run bucle si da error al grabar el INSERT INTO ...
         
      do
       {   
         this.wDetalle.setVisible(true); // aparece la ventana como MODAL , luego la siguiente linea a esta no se ejecuta hasta que se cierre esa ventana modal.
         
          // preguntamos si quiere grabar o no..
            if (!this.wDetalle.grabar) return; // si no quiere grabar nos vamos..              
 
         /*modificado por josem */   
         Clientes cliente=new Clientes(this.wDetalle.getNif(),this.wDetalle.getNombre(),this.wDetalle.getDireccion(),this.wDetalle.getTlf());
         cdao.guardaCliente(cliente);
        /*modificacion josem */
         
         this.cargaDatos();
         this.modelo.fireTableDataChanged();

         ok=true;
 
       } while (!ok);
      
    }//GEN-LAST:event_btnNuevaFilaActionPerformed
    
    /*
    * Boton MODIFICAR REGISTRO Q CONTIENE LA FILA 
    */
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
         
        int n=this.rejillaDatos.getSelectedRow();
       
       if  ( n < 0 ) return;       // si no estamos sobre ninguna fila nos vamos.
       
     
         this.wDetalle.modoEditar(); // ahora aparecen los botones de grabar y cancelar y se nos pone en modal
         String nifOriginal=this.dameElNifPinchado(n); // guardamos el nif (clave principal) para poder hacer el UPDATE ... WHERE NIF = este nif 

         this.wDetalle.recargaDatos(nifOriginal);// cargamos los datos para este NIF para despues modificarlos
         
         boolean ok; // para hace run bucle si da error al grabar el INSERT INTO ...
         
      do
       {   
         this.wDetalle.setVisible(true); // aparece la ventana como MODAL , luego la siguiente linea a esta no se ejecuta hasta que se cierre esa ventana modal.
         
          // preguntamos si quiere grabar o no..
          
          if (!this.wDetalle.grabar) return; // si no quiere grabar nos vamos..              
         
            /*modificado por josem */
            Clientes cliente=cdao.getCliente(nifOriginal); 
            // actualizan los nuevos valores de las propiedades del objeto cliente 
            cliente.setNif(this.wDetalle.getNif());
            cliente.setNombre(this.wDetalle.getNombre());
            cliente.setDireccion(this.wDetalle.getDireccion());
            cliente.setTelefono(this.wDetalle.getTlf());
                        
            // luego enviamos el objeto a ser actualizado    
            cdao.actualizaCliente(cliente);
            /*fin modificacion josem */
            
            this.cargaDatos(); // recargamos datos
            this.modelo.fireTableDataChanged(); // decimos que han cambiado los datos para que se repinte la rejilla
            ok=true; // todo ok .. nos vamos...

       } while (!ok);
        
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * Boton SALIR DE LA APLICACION
     */
    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // cierra la aplicacion completa y sale de la misma
        System.exit(0);
       
    }//GEN-LAST:event_jButtonSalirActionPerformed

   
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JToggleButton btnBorrar;
    private javax.swing.JButton btnIrAlFinal;
    private javax.swing.JButton btnIrAlPrincipio;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevaFila;
    private javax.swing.JButton btnSiguiente;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable rejillaDatos;
    // End of variables declaration//GEN-END:variables
}
